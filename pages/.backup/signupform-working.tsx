import { yupResolver } from "@hookform/resolvers/yup";
import type { NextPage } from 'next';
import Head from 'next/head';
 
import axios from "axios";
import Cookies from "js-cookie";
import Image from 'next/image';
import { useRouter } from 'next/router';
 
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import styles from '../styles/Home.module.css';

import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
 
import { getUserState, setName } from '../store/slices/userSlice';
import { useDispatch, useSelector } from '../store/store';
 

interface IFormInput {
  fullname: string;
  username: string;
  email: string;
  password: string;
  confirmPassword: string;
  acceptTerms: boolean;
}
 
const schema = Yup.object().shape({
    fullname: Yup.string().required('Fullname is required'),
    username: Yup.string()
      .required('Username is required')
      .min(6, 'Username must be at least 6 characters')
      .max(20, 'Username must not exceed 20 characters'),
    email: Yup.string()
      .required('Email is required')
      .email('Email is invalid'),
    password: Yup.string()
      .required('Password is required')
      .min(6, 'Password must be at least 6 characters')
      .max(40, 'Password must not exceed 40 characters'),
    confirmPassword: Yup.string()
      .required('Confirm Password is required')
      .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),
    acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')
  });

// const [name, setName] = useState("")
// const [option, setOption] = useState("")


 

const Register: NextPage = () => {
  // const notify = () => toast("Wow so easy!");
 
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<IFormInput>({
    resolver: yupResolver(schema),
  });


  
  const router = useRouter();
  const redirect = router.query.redirect as string;
  //const { state, dispatch } = useContext(StoreContext);
  //const { userInfo } = state;


  const dispatch = useDispatch();
  const { name, email } = useSelector(getUserState);

  const onClick = () => {
    setTimeout(() => {
      dispatch(setName('9898998'));
     // dispatch(setEmail('sulhadin@hotmail.com'));
    }, 1000);
  };


  // useEffect(() => {
  //   if (userInfo) {
  //     router.push("/");
  //   }
  // }, []);

  const onSubmit = async (data: IFormInput) => {
  
      let {  fullname,
      username,
      email,
      password,
      confirmPassword,
      acceptTerms } = data;
   
    try {
      const { data } = await axios.post("/api/users/register", {
        name:fullname,
        username,
        email,
        password,
        confirmPassword,
        acceptTerms
      });
    dispatch({ type: "USER_LOGIN", payload: data });

     Cookies.set("userInfo", data);
     router.push(redirect || "/");
     toast.success("Successfully Signup")
     
    } catch (err: any) {
    
    }
   // setJson(JSON.stringify(data));
  };


  const onChangeSelect = (event: any) => {
    //setOption(event.target.value)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link href="//netdna.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
      </Head>
      <main className={styles.main}>
      
       
      <ToastContainer position="bottom-center" />
     
      <h3  >
        Sign Up Form  
      </h3>

      {/* <button onClick={onClick}>Change it!</button> */}
    
      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="form-group">
          <label>Full Name</label>
          <input
            type="text"
            {...register('fullname')}
            className={`form-control ${errors.fullname ? 'is-invalid' : ''}`}
          />
          <div className="invalid-feedback">{errors.fullname?.message}</div>
        </div>
        <div className="form-group">
          <label>Username</label>
          <input
            type="text"
            {...register('username')}
            className={`form-control ${errors.username ? 'is-invalid' : ''}`}
          />
          <div className="invalid-feedback">{errors.username?.message}</div>
        </div>
        <div className="form-group">
          <label>Email</label>
          <input
            type="text"
            {...register('email')}
            className={`form-control ${errors.email ? 'is-invalid' : ''}`}
          />
          <div className="invalid-feedback">{errors.email?.message}</div>
        </div>
        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            {...register('password')}
            className={`form-control ${errors.password ? 'is-invalid' : ''}`}
          />
          <div className="invalid-feedback">{errors.password?.message}</div>
        </div>
        <div className="form-group">
          <label>Confirm Password</label>
          <input
            type="password"
            {...register('confirmPassword')}
            className={`form-control ${
              errors.confirmPassword ? 'is-invalid' : ''
            }`}
          />
          <div className="invalid-feedback">
            {errors.confirmPassword?.message}
          </div>
        </div>
        <div className="form-group form-check">
          <input
            type="checkbox"
            {...register('acceptTerms')}
            className={`form-check-input ${
              errors.acceptTerms ? 'is-invalid' : ''
            }`}
          />
          <label htmlFor="acceptTerms" className="form-check-label">
            I have read and agree to the Terms
          </label>
          <div className="invalid-feedback">{errors.acceptTerms?.message}</div>
        </div>
        <div className="form-group">
          <button type="submit" className="btn btn-primary">
            Register
          </button>
          <button
            type="button"
            onClick={() => reset()}
            className="btn btn-warning float-right"
          >
            Reset
          </button>
        </div>
      </form>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Register


 