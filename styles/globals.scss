html {
  scroll-behavior: smooth;
  font-size: clamp(62.5%, 0.326vw + 50.9%, 100%);
}

body {
  width: 100%;
  font-size: 1.6rem;
  font-family: Montserrat, sans-serif;
  overflow-x: hidden;
}

*,
::before,
::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

a {
  text-decoration: none;
}

ul {
  list-style-type: none !important;
}

/*
  Improved screen reader only CSS class
  @author Gaël Poupard
    @note Based on Yahoo!'s technique
    @author Thierry Koblentz
    @see https://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html
  * 1.
    @note `clip` is deprecated but works everywhere
    @see https://developer.mozilla.org/en-US/docs/Web/CSS/clip
  * 2.
    @note `clip-path` is the future-proof version, but not very well supported yet
    @see https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path
    @see http://caniuse.com/#search=clip-path
    @author Yvain Liechti
    @see https://twitter.com/ryuran78/status/778943389819604992
  * 3.
    @note preventing text to be condensed
    author J. Renée Beach
    @see https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
    @note Drupal 8 goes with word-wrap: normal instead
    @see https://www.drupal.org/node/2045151
    @see http://cgit.drupalcode.org/drupal/commit/?id=5b847ea
  * 4.
    @note !important is important
    @note Obviously you wanna hide something
    @author Harry Roberts
    @see https://csswizardry.com/2016/05/the-importance-of-important/
*/

.sr-only {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important; /* 1 */
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important; /* 2 */
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
  white-space: nowrap !important; /* 3 */
}

/*
  Use in conjunction with .sr-only to only display content when it's focused.
  @note Useful for skip links 
  @see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
  @note Based on a HTML5 Boilerplate technique, included in Bootstrap
  @note Fixed a bug with position: static on iOS 10.0.2 + VoiceOver
    @author Sylvain Pigeard
    @see https://github.com/twbs/bootstrap/issues/20732
*/
.sr-only-focusable:focus,
.sr-only-focusable:active {
  clip: auto !important;
  -webkit-clip-path: none !important;
  clip-path: none !important;
  height: auto !important;
  margin: auto !important;
  overflow: visible !important;
  width: auto !important;
  white-space: normal !important;
}


// pagenation

$colorDark: #2e2e2e;
$colorGrey100: #888888;
$colorGrey300: #f4f4f4;
$colorNegative: #ff421e;

$spacingBase: 20px;
$spacingXs: $spacingBase / 4;
$spacingSm: $spacingBase / 2;
$spacingLg: $spacingBase * 2;
$spacingXl: $spacingBase * 3;
$spacingXxl: $spacingBase * 5;

$borderSize: 1px;
$borderRadius: 10px;
$iconSize: 20px;
$disabledOpacity: 0.5;

$transTimeBase: 250ms;
$easeBase: cubic-bezier(0.73, 0.09, 0.21, 0.96);

$buttonColor: $colorGrey100;
$buttonBackground: transparent;
$buttonFocusShadowColor: #eeeeee;
$buttonHoverBackground: rgba($colorDark, 0.08);
$buttonHoverColor: darken($colorGrey100, 20%);
$buttonPadding: 8px;
$buttonRadius: $borderRadius;

$inputBackgroundColor: $colorGrey300;
$inputTextColor: $colorDark;
$inputPlaceholderColor: $colorGrey100;
$inputOutlineColor: #eeeeee;
$inputSpacingX: $spacingSm;
$inputSpacingY: $spacingSm;
$inputRadius: $borderRadius;

html {
	box-sizing: border-box;
}
* {
	&,
	&:before,
	&:after {
		box-sizing: inherit;
	}
}

 

// Button
.button {
	display: inline-flex;
	padding: $buttonPadding;
	overflow: hidden;
	cursor: pointer;

	position: relative;

	background: $buttonBackground;
	border: none;
	border-radius: $buttonRadius;

	color: $buttonColor;
	font-weight: 600;
	text-decoration: none;

	transition: $transTimeBase $easeBase background-color,
		$transTimeBase $easeBase border-color, $transTimeBase $easeBase color,
		$transTimeBase $easeBase opacity;

	&:focus {
		outline: 0;
		box-shadow: 0 0 1px 3px $buttonFocusShadowColor;
	}

	&:active {
		box-shadow: none;
	}

	&:disabled {
		background: transparent;
		opacity: $disabledOpacity;
		cursor: not-allowed;
	}

	&:not(:disabled):hover {
		background: rgba($colorDark, 0.08);
		color: $buttonHoverColor;
	}

	&.textNegative {
		color: $colorNegative;

		&:hover {
			color: $colorNegative;
		}
	}
}

// Icon
.icon {
	display: flex;
	flex-shrink: 0;
	width: $iconSize;
	height: $iconSize;
	fill: currentColor;

	svg {
		display: block;
		width: 100%;
		height: 100%;
	}
}

// Input
.input {
	width: 40px;
	max-width: 100%;
	padding: $inputSpacingY $inputSpacingX;

	background-color: $inputBackgroundColor;
	border: 0;
	border-radius: $inputRadius;
	box-shadow: none; // remove native styles in Firefox

	color: $inputTextColor;
	font-weight: 600;
	text-align: center;

	&::placeholder {
		color: $inputPlaceholderColor;
		font-weight: 400;
		opacity: 1;
	}

	&:focus {
		outline: 0;
		box-shadow: 0 0 1px 3px $inputOutlineColor;
	}

	&:disabled {
		opacity: $disabledOpacity;
		cursor: not-allowed;
	}

	// Hide arrows on number field
	&[type="number"] {
		appearance: textfield;
	}
	&[type="number"]::-webkit-outer-spin-button,
	&[type="number"]::-webkit-inner-spin-button {
		appearance: none;
	}
}

//Pagination
.pagination {
	display: flex;
	justify-content: center;
	align-items: center;
}

.text {
	display: block;
	margin: 0 $spacingSm;
}

.pageText {
	@media only screen and (max-width: 375px) {
		display: none;
	}
}

.pageTitle {
	position: absolute;
	top: $spacingBase;
	left: $spacingBase;
	right: $spacingBase;
	
	text-align: center;
}

.currentPageLabel {
	position: absolute;
	bottom: $spacingBase;
	left: $spacingBase;
}


// Popup start

.popup-component {
	position: relative;
	display: inline-block;
  
	&[data-action="hover"]:hover .popupHandle {
	  filter: drop-shadow(0px 10px 20px rgba(0, 0, 0, 0.25));
	}
	&[data-action="hover"]:not(:hover),
	&[data-action="click"]:not(.open) {
	  .popupContent {
		visibility: hidden;
		position: absolute;
		left: -1000px;
	  }
	}
  
	.popupContent {
		width: 200px;
	  position: absolute;
	  left: var(--contentLeft);
	  z-index: 101;
	  .inner {
		position: relative;
		padding: 22px 17px;
		background-color: #FFF;
		border: 1px solid #333;
		font-size: 14px;
		box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);
		z-index: 1;
		&::after {
		  content: "";
		  position: absolute;
		  left: var(--handleLeft);
		  background-color: #FFF;
		  border: 1px solid #333;
		  width: 21px;
		  height: 21px;
		  transform: rotate(-45deg);
		  transform-origin: 0 0;
		}
	  }
	  &.above {
		bottom: 100%;
		padding-bottom: 27px;
		.inner::after {
		  top: 100%;
		  border-top: none;
		  border-right: none;
		}
	  }
	  &.below {
		top: 100%;
		padding-top: 27px;
		.inner::after {
		  top: 0;
		  border-bottom: none;
		  border-left: none;
		}
	  }
	}
  }
// Popup end
  

$colorDark: #2e2e2e;
$colorGrey100: #888888;
$colorGrey300: #f4f4f4;
$colorNegative: #ff421e;

$spacingBase: 20px;
$spacingXs: $spacingBase / 4;
$spacingSm: $spacingBase / 2;
$spacingLg: $spacingBase * 2;
$spacingXl: $spacingBase * 3;
$spacingXxl: $spacingBase * 5;

$borderSize: 1px;
$borderRadius: 10px;
$iconSize: 20px;
$disabledOpacity: 0.5;

$transTimeBase: 250ms;
$easeBase: cubic-bezier(0.73, 0.09, 0.21, 0.96);

$buttonColor: $colorGrey100;
$buttonBackground: transparent;
$buttonFocusShadowColor: #eeeeee;
$buttonHoverBackground: rgba($colorDark, 0.08);
$buttonHoverColor: darken($colorGrey100, 20%);
$buttonPadding: 8px;
$buttonRadius: $borderRadius;

$inputBackgroundColor: $colorGrey300;
$inputTextColor: $colorDark;
$inputPlaceholderColor: $colorGrey100;
$inputOutlineColor: #eeeeee;
$inputSpacingX: $spacingSm;
$inputSpacingY: $spacingSm;
$inputRadius: $borderRadius;
 