import { yupResolver } from "@hookform/resolvers/yup";
import type { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useForm } from "react-hook-form";
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import * as Yup from "yup";
 
import 'bootstrap/dist/css/bootstrap.min.css';
import Container from "components/ui/Container";
import { useEffect } from 'react';
import Button from 'react-bootstrap/Button';
import Col from 'react-bootstrap/Col';
import FloatingLabel from 'react-bootstrap/FloatingLabel';
import Form from 'react-bootstrap/Form';
import Row from 'react-bootstrap/Row';
import { createUser, getUserState } from 'store/slices/userSlice';
import { useDispatch, useSelector } from 'store/store';

let userStorageInfo:string|null;
interface IFormInput {
  username: string;
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
  acceptTerms: boolean;
}
 
const schema = Yup.object().shape({
    name: Yup.string().required('Name is required'),
    username: Yup.string()
      .required('Username is required')
      .min(6, 'Username must be at least 6 characters')
      .max(20, 'Username must not exceed 20 characters'),
    email: Yup.string()
      .required('Email is required')
      .email('Email is invalid'),
    password: Yup.string()
      .required('Password is required')
      .min(6, 'Password must be at least 6 characters')
      .max(40, 'Password must not exceed 40 characters'),
    confirmPassword: Yup.string()
      .required('Confirm Password is required')
      .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),
    acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')
  });

// const [name, setName] = useState("")
// const [option, setOption] = useState("")


 

const Register: NextPage = () => {
  // const notify = () => toast("Wow so easy!");
 
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<IFormInput>({
    resolver: yupResolver(schema),
  });


  
  const router = useRouter();
  const redirect = router.query.redirect as string;
  //const { state, dispatch } = useContext(StoreContext);
  //const { userInfo } = state;


  const dispatch = useDispatch();
  const { name, email,  username } = useSelector(getUserState);
  
 
  

  const {  userinfo, isLoading, isError, isSuccess } = useSelector(
    (state) => state.user
  )
   
 
  useEffect(() => {
    if (isError) {
      toast.error("There is error")
    }

    if (isSuccess) {
     router.push(redirect || "/dashboard");
       let info:string = JSON.stringify(userinfo[0])
    }

    userStorageInfo =  localStorage.getItem("user");
   
    if (userStorageInfo) {
      router.push(redirect || "/dashboard");       
    } 
    
    // dispatch(reset())
  }, [isError, isSuccess,  dispatch])

  const onSubmit = async (data: IFormInput) => {
    try {
    /*  let {  fullname,
      username,
      email,
      password,
      confirmPassword,
      acceptTerms } = data;
   
    try {
      const { data } = await axios.post("/api/users/register", {
        name:fullname,
        username,
        email,
        password,
        confirmPassword,
        acceptTerms
      });

    dispatch({ type: "USER_LOGIN", payload: data });*/

     // Cookies.set("userInfo", data);
     //router.push(redirect || "/");
    //  dispatch(createUser);

    // dispatch(setName('monirrr'));
    dispatch(
      createUser(data)
    );

   
    
     
    // dispatch({ type: "USER_LOGIN", payload: data });
     toast.success("Successfully Signup")
     
    } catch (err: any) {
    
    }
   // setJson(JSON.stringify(data));
  };


  const onChangeSelect = (event: any) => {
    //setOption(event.target.value)
  }

  return (
    <Container title="Dashboard">
      <Head>
        <title>Register Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        {/* <link href="//netdna.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" /> */}
      </Head>
      
       
      <ToastContainer position="bottom-center" />
      
      <h3  >
        Sign Up Form  {name}
      </h3>
 

      <Form onSubmit={handleSubmit(onSubmit)}>
  

      <Form.Group className="mb-3" controlId="formBasicName">
        <Form.Label>Name</Form.Label>
        <Form.Control  {...register('name')} type="text" 
        className={`form-control ${errors.name ? 'is-invalid' : ''}`} placeholder="Enter email" />
       
      </Form.Group>

      <Form.Group className="mb-3" controlId="formBasicName">
        <Form.Label>Username</Form.Label>
        <Form.Control  {...register('username')} type="text" 
        className={`form-control ${errors.username ? 'is-invalid' : ''}`} placeholder="Enter Username" />
      </Form.Group>

      <Form.Group className="mb-3" controlId="formEmail">
        <Form.Label>Email address</Form.Label>
        <Form.Control  {...register('email')} type="email" 
         className={`form-control ${errors.email ? 'is-invalid' : ''}`} placeholder="Enter email" />
        <Form.Text className="text-muted">
          We'll never share your email with anyone else.
        </Form.Text>
      </Form.Group>

      <Form.Group className="mb-3" controlId="formBasicPassword">
        <Form.Label> Password</Form.Label>
        <Form.Control type="password"  {...register('password')} 
        className={`form-control ${errors.email ? 'is-invalid' : ''}`}  placeholder="Password" />
      </Form.Group>


      <Form.Group className="mb-3" controlId="formBasicPassword">
        <Form.Label>Confirm Password</Form.Label>
        <Form.Control type="password"  {...register('confirmPassword')} 
         className={`form-control ${errors.email ? 'is-invalid' : ''}`}  placeholder="Password" />
      </Form.Group>

      <Form.Group className="mb-3" controlId="formBasicCheckbox">
        <Form.Check type="checkbox" {...register('acceptTerms')} 
         className={`${errors.acceptTerms ? 'is-invalid' : '' }`} 
         label="I have read and agree to the Terms" />
      </Form.Group>

      <Row className="g-2">
      <Col md>
        <FloatingLabel controlId="floatingInputGrid" >
        <Button variant="primary" type="submit" className="btn btn-primary form-control">
        Submit
      </Button>
    
        </FloatingLabel>
      </Col>
      <Col md>
        <FloatingLabel
          controlId="floatingSelectGrid"
           
        >
            <Button variant="warning" type="button"
            onClick={() => reset()}    className="btn btn-warnin form-control ">
        Reset
      </Button>
        </FloatingLabel>
      </Col>
    </Row>
 

    </Form>

     
      {/* <form onSubmit={handleSubmit(onSubmit)}>
        <div className="form-group">
          <label>Full Name</label>
          <input
            type="text"
            {...register('name')}
            className={`form-control ${errors.name ? 'is-invalid' : ''}`}
          />
          <div className="invalid-feedback">{errors.name?.message}</div>
        </div>
        <div className="form-group">
          <label>Username</label>
          <input
            type="text"
            {...register('username')}
            className={`form-control ${errors.username ? 'is-invalid' : ''}`}
          />
          <div className="invalid-feedback">{errors.username?.message}</div>
        </div>
        <div className="form-group">
          <label>Email</label>
          <input
            type="text"
            {...register('email')}
            className={`form-control ${errors.email ? 'is-invalid' : ''}`}
          />
          <div className="invalid-feedback">{errors.email?.message}</div>
        </div>
        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            {...register('password')}
            className={`form-control ${errors.password ? 'is-invalid' : ''}`}
          />
          <div className="invalid-feedback">{errors.password?.message}</div>
        </div>
        <div className="form-group">
          <label>Confirm Password</label>
          <input
            type="password"
            {...register('confirmPassword')}
            className={`form-control ${
              errors.confirmPassword ? 'is-invalid' : ''
            }`}
          />
          <div className="invalid-feedback">
            {errors.confirmPassword?.message}
          </div>
        </div>
        <div className="form-group form-check">
        <label htmlFor="acceptTerms" className="form-check-label">
          <input
            type="checkbox"
            {...register('acceptTerms')}
            className={`form-check-input ${
              errors.acceptTerms ? 'is-invalid' : ''
            }`}
          />
         
            I have read and agree to the Terms
          </label>
          <div className="invalid-feedback">{errors.acceptTerms?.message}</div>
        </div>
        <div className="form-group">
          <button type="submit" className="btn btn-primary">
            Register
          </button>
          <button
            type="button"
            onClick={() => reset()}
            className="btn btn-warning float-right"
          >
            Reset
          </button>
        </div>
      </form> */}

      
      </Container>



  )
}

export default Register


 