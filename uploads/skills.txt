https://www.prisma.io/blog/fullstack-nextjs-graphql-prisma-oklidw1rhw

 Are you familiar with Big O notation, algorithms, data structures and terms like idempotency, queue message ordering ? Required 
 
    JavaScript (Node, React, Next)
    Microservice
    AWS Amplify
    AWS Lambda
    AWS AppSync
    GraphQL
    DynamoBD/ MongoDB
    Amazon Cognito
    Amazon S3
    Agile Project Management
    Familiar with Node.js for task automation (grunt, gulp, webpack, …) and package management (npm, Bower, …)


    If I’m hiring a Fullstack Nodejs developer I’m looking for the following:

    Experience with Express concepts (routes, how the server works, req/res, locals…)
    Experience with one of the common ORMs (Sequelize, Sails…)
    MVC for the web (how models, views, controllers are fairly standardized for Nodejs apps)
    Experience with a templating language (Mustache, Handlebars, EJS…)
    Modern JavaScript language features (promises + async/await, ES6 & 7 syntax…)
    Experience with a front end framework (React, Angular, Backbone…)
    Modern CSS 3.0 & HTML
    Some Database experience (MySQL, Mongo, Postgres…)

For Senior Developers

    Performance considerations (parallelization with async, minimizing HTTP requests, minimizing DOM interaction, building CSS / JS front end files)
    Very detailed syntax knowledge (senior developers memorize syntax because they’ve coded in it everyday for years, junior developers might still need the docs)
    Security Knowledge (CSRF, SQL Injection prevention, JS injection prevention…)
    Server setup & administration (E.g. ins and outs of AWS, DNS setup, DB setup, Docker, etc.)

When I say “Experience” that means work, freelance, or personal projects. Developers have to change languages all the time as their career progresses, so it doesn’t make sense to always expect someone has coded Nodejs in their current organization, but you shouldn’t be applying to a Nodejs position if you haven’t at least built a side project in Node and have gone through the experience of hello world to basic reading from a database to a simple asynchronous-on-the-backend, single-page-on the-front-end app.



Singleton Pattern

Singleton is a design pattern that ensures that a class has only one immutable instance.

Factory Method Pattern

The Factory method pattern provides an interface for creating objects that can be modified after creation. 

Abstract Factory Pattern

The Abstract Factory pattern allows us to produce families of related objects without specifying concrete classes. It's useful in situations where we need to create objects that share only some properties and methods.

Builder Pattern

The Builder pattern is used to create objects in "steps". Normally we will have functions or methods that add certain properties or methods to our object.
